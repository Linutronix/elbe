#!/usr/bin/env python3

# ELBE - Debian Based Embedded Rootfilesystem Builder
# SPDX-License-Identifier: GPL-3.0-or-later
# SPDX-FileCopyrightText: 2024 Linutronix GmbH

import sys
import textwrap

import elbevalidate
import elbevalidate.pytest


def test_build_directory_contents(build_dir):
    created_files = list([p.name for p in build_dir.iterdir()])
    for f in [
            'elbe-report.txt',
            'licence-chroot.txt',
            'licence-chroot.xml',
            'licence-target.txt',
            'licence-target.xml',
            'log.txt',
            'sda.img',
            'source.xml',
            'validation.txt',
            ]:

        assert f in created_files


def test_validation_txt(build_dir):
    assert build_dir.joinpath('validation.txt').read_text().strip() in [
        textwrap.dedent("""
            ELBE Package validation
            =======================

            Package List validation
            -----------------------

            No Errors found

            Archive validation
            ------------------
        """).strip(),

        textwrap.dedent("""
            ELBE Package validation
            =======================

            Package List validation
            -----------------------

            No Errors found

            Archive validation
            ------------------

            Binary CD
            Source CD
        """).strip()
    ]


def test_elbe_report_txt(build_dir):
    elbe_report = build_dir.joinpath('elbe-report.txt').read_text()

    assert elbe_report.startswith('ELBE Report for Project simple-validation-image')

    assert textwrap.dedent("""
        Apt Sources dump
        ----------------

        deb [arch=amd64] http://deb.debian.org/debian bookworm main


        Apt Preferences dump
        --------------------
    """) in elbe_report or textwrap.dedent("""
        Apt Sources dump
        ----------------

        deb-src [] http://deb.debian.org/debian bookworm main
        deb [arch=amd64] http://deb.debian.org/debian bookworm main


        Apt Preferences dump
        --------------------
    """) in elbe_report

    assert textwrap.dedent("""
        Apt Preferences dump
        --------------------





        Installed Packages List
        -----------------------
    """) in elbe_report

    assert textwrap.dedent("""
        Installed Packages List
        -----------------------

        Local
        ~~~~~

        |libgpio1|3.0.0| bookworm main

        Debian
        ~~~~~~

        |adduser|
    """.rstrip()) in elbe_report

    assert textwrap.dedent("""
        File List
        ---------

        |+//testfile+|added in finetuning
    """) in elbe_report

    assert '\n|+/usr/bin/mount+|mount\n' in elbe_report


def test_elbe_log_txt(build_dir):
    log = build_dir.joinpath('log.txt').read_text()

    assert log.startswith('[INFO]Build started\n')

    assert 'I: Extracting util-linux...' in log
    assert '[CMD] cat /etc/hosts | cat -n > /etc/hosts4' in log

    assert log.endswith('[INFO]Build finished successfully\n')


def _test_generated_elbe_files(build_dir, root):
    elbe_version = root.joinpath('etc', 'elbe_version').read_text()
    assert elbe_version.startswith('simple-validation-image 1.0\nthis RFS was generated by elbe')

    assert root.joinpath('etc', 'updated_version').read_text() == '1.0'

    img_elbe_xml = root.joinpath('etc', 'elbe_base.xml').read_text()
    build_dir_elbe_xml = build_dir.joinpath('source.xml').read_text()

    assert img_elbe_xml == build_dir_elbe_xml


def _test_finetuning(root):
    # <rm>var/cache/apt/archives/*.deb</rm>
    for f in root.joinpath('var', 'cache', 'apt', 'archives').iterdir():
        assert f.suffix != '.deb'

    # <mkdir>/var/cache/test-dir</mkdir>
    assert root.joinpath('var', 'cache', 'test-dir').is_dir()

    # <mknod opts="c 0 5">/dev/null2</mknod>
    assert root.joinpath('dev', 'null2').is_char_device()

    # <cp path="/etc/hosts">/etc/hosts2</cp>
    assert root.joinpath('etc', 'hosts2').is_file()
    assert root.joinpath('etc', 'hosts2').read_text() == root.joinpath('etc', 'hosts').read_text()

    # <mv path="/etc/issue">/etc/issue2</mv>
    assert root.joinpath('etc', 'issue2').is_file()
    assert not root.joinpath('etc', 'issue').exists()

    # <ln path="/etc/hosts">/etc/hosts3</ln>
    assert root.joinpath('etc', 'hosts3').is_symlink()
    assert root.joinpath('etc', 'hosts3').readlink() == root.joinpath('etc', 'hosts')

    # <adduser groups="nogroup,staff" shell="/bin/sh" uid="2000"
    #          home="/home/nottestuser" system="true" create_home="true" create_group="true">
    #   testuser
    # </adduser>
    assert '\ntestuser:x:2000:997::/home/nottestuser:/bin/sh\n' in \
        root.joinpath('etc', 'passwd').read_text()

    # <addgroup gid="2001" system="false">testgroup</addgroup>
    assert '\ntestgroup:x:2001:\n' in root.joinpath('etc', 'group').read_text()

    # <file dst="/testfile" encoding="plain" owner="nobody" group="nogroup" mode="640">
    # 	Some cöntent wíth spe©ial characters
    # </file>
    assert root.joinpath('testfile').is_file()
    assert root.joinpath('testfile').read_text() == 'Some cöntent wíth spe©ial characters'

    # <command>cat /etc/hosts | cat -n > /etc/hosts4</command>
    assert root.joinpath('etc', 'hosts4').is_file()
    assert root.joinpath('etc', 'hosts4').read_text().startswith('     1\t127.0.0.1\tlocalhost\n')

    # <raw_cmd>cp /etc/hosts /etc/hosts5</raw_cmd>
    assert root.joinpath('etc', 'hosts5').is_file()
    assert root.joinpath('etc', 'hosts5').read_text().startswith('127.0.0.1\tlocalhost\n')


def _test_archive(root):
    archive_file = root.joinpath('opt', 'archive-file')
    assert archive_file.is_file()

    archive_file_stat = archive_file.stat()
    assert archive_file_stat.st_mode & 0o777 == 0o644
    assert archive_file_stat.st_uid == 0
    assert archive_file_stat.st_gid == 0


def _test_rfs_partition(build_dir, part):
    assert part.number == 1
    assert part.start == 1 * 1024 * 1024
    assert part.size == 799 * 1024 * 1024
    assert part.type == '83'

    blkid = part.blkid()
    assert blkid['USAGE'] == 'filesystem'
    assert blkid['TYPE'] == 'ext4'
    assert blkid['LABEL'] == 'rfs'

    with part.files() as root:
        statvfs = elbevalidate.statvfs(root)
        assert statvfs.f_bfree * statvfs.f_bsize > 300 * 1024 * 1024

        assert root.joinpath('etc', 'hostname').read_text() == 'validation-image'
        assert root.joinpath('etc', 'mailname').read_text() == 'validation-image.elbe-ci'
        assert not root.joinpath('etc', 'resolv.conf').exists()
        assert root.joinpath('etc', 'fstab').read_text().strip() == textwrap.dedent("""
        LABEL=rfs / ext4 defaults 0 0
        """).strip()
        assert root.joinpath('etc', 'os-release').read_text().strip() == textwrap.dedent("""
            PRETTY_NAME="Debian GNU/Linux 12 (bookworm)"
            NAME="Debian GNU/Linux"
            VERSION_ID="12"
            VERSION="12 (bookworm)"
            VERSION_CODENAME=bookworm
            ID=debian
            HOME_URL="https://www.debian.org/"
            SUPPORT_URL="https://www.debian.org/support"
            BUG_REPORT_URL="https://bugs.debian.org/"
        """).strip()
        assert root.joinpath('etc', 'apt', 'sources.list').read_text() in [
            # With and without source CDROM
            'deb-src [] http://deb.debian.org/debian bookworm main\n'
            'deb [arch=amd64] http://deb.debian.org/debian bookworm main',

            'deb [arch=amd64] http://deb.debian.org/debian bookworm main',
        ]

        assert root.joinpath('etc', 'apt', 'trusted.gpg.d',
                             'elbe-xml-primary-key.gpg').read_bytes() == (
            b'\x983\x04c\xce\xb9S\x16\t+\x06\x01\x04\x01\xdaG\x0f\x01\x01\x07@w\xb6t\xb2\xbc.\x86P'
            b'z$\xa1dq\xfe\x07S\x84\x92K\xfc\\E\xfc\x04Al\xebr\xb7\xfa\x00J\xb4IDebian Stable Rele'
            b'ase Key (12/bookworm) <debian-release@lists.debian.org>\x88\x96\x04\x13\x16\x08\x00>'
            b'\x16!\x04Md\xfe\xc1\x19\xc2\x02\x90g\xd6\xe7\x91\xf8\xd2X[\x87\x83\xd4\x81\x05\x02c'
            b'\xce\xb9S\x02\x1b\x03\x05\t\x0f\t\x9c\x00\x05\x0b\t\x08\x07\x02\x06\x15\n\t\x08\x0b'
            b'\x02\x04\x16\x02\x03\x01\x02\x1e\x01\x02\x17\x80\x00\n\t\x10\xf8\xd2X[\x87\x83\xd4'
            b'\x81J\x0c\x01\x00\xffj\xa5\xe3\xb9\xcf[9\x9b\x80\xf8\xcft\xdc\xa8:5\xc1\xec\xfa\x0c'
            b'\xdc\x9a\xdb\xb4\x16Z\x81\xbf\xe2\x80l\x01\x00\x847\xc6t\xd05\xda\x80\xf1\xdb\xc2'
            b"\xbb\xecck}\x04+\x13\xf8\xf8'J\x7f[\x8a\x86\xf0_\xb6\xc3\x0e"
        )

        sources_list_d = root.joinpath('etc', 'apt', 'sources.list.d')
        assert sources_list_d.is_dir()
        assert len(list(sources_list_d.iterdir())) == 0

        getty_service = root.joinpath('etc', 'systemd', 'system', 'getty.target.wants',
                                      'serial-getty@ttyS0.service')
        assert getty_service.is_symlink()
        assert str(getty_service.readlink()) == '/lib/systemd/system/serial-getty@.service'

        assert root.joinpath('usr', 'bin', 'unzip').is_file()
        assert root.joinpath('usr', 'lib', 'x86_64-linux-gnu', 'libgpio-3.0.0.so.3.0.0').is_file()

        _test_generated_elbe_files(build_dir, root)
        _test_finetuning(root)
        _test_archive(root)


def test_image(build_dir):
    with elbevalidate.Image.from_file(build_dir / 'sda.img') as img:
        assert img.size == 800 * 1024 * 1024

        blkid = img.blkid()
        assert blkid['PTTYPE'] == 'dos'

        partitions = img.partitions
        assert len(partitions) == 1

        _test_rfs_partition(build_dir, partitions[0])


if __name__ == '__main__':
    elbevalidate.pytest.run_with_pytest(__file__, sys.argv[1])
