# ELBE - Debian Based Embedded Rootfilesystem Builder
# Copyright (c) 2018 Philipp Rosenberger <p.rosenberger@linutronix.de>
# Copyright (c) 2018 Torben Hohn <torben.hohn@linutronix.de>
# Copyright (c) 2019 Olivier Dion <dion@linutronix.de>
#
# SPDX-License-Identifier: GPL-3.0-or-later

import os
import stat

from shutil import copyfile

from pkg_resources import parse_version as V

from elbepack.debianize.base.tui import TUI
from elbepack.debianize.panels.base import Panel
from elbepack.debianize.widgets.edit import Edit

from elbepack.templates import template
from elbepack.directories import mako_template_dir
from elbepack.shellhelper import system


class UBoot(Panel):

    copyright_fname = 'Licenses/README'
    match_files = ['Makefile', 'Kbuild', 'Kconfig', 'MAINTAINERS', 'config.mk']

    def __init__(self):

        defconfig = Edit("defconfig", "mx7dsabresd_defconfig")
        cross = Edit("Cross compile", "arm-linux-gnueabihf-")
        imgname = Edit("Image name", "u-boot-dtb.imx")
        k_version = Edit("U-Boot Version")

        grid_elements = [
            {"defconfig": defconfig, "imgname": imgname},
            {"cross_compile": cross, "k_version": k_version},
        ]

        super(UBoot, self).__init__(grid_elements)

        self.get_version()
        k_version.base_widget.set_edit_text(self.verstr)

    def get_version(self):
        with open('Makefile', 'r') as f:
            for line in f:
                if line.startswith('VERSION = '):
                    version = line.split('=')[1].strip()
                elif line.startswith('PATCHLEVEL = '):
                    patchlevel = line.split('=')[1].strip()
                    break

        self.verstr = version + '.' + patchlevel
        # With v2014.04 the u-boot Makefile knows the 'tools-only' target.
        if V(self.verstr) < V('2014.04'):
            TUI.printf("Only U-Boot >= 2014.04 is supported.\n"
                       f"This is version '{self.verstr}'")

        if V(self.verstr) >= V('2017.09'):
            self.deb['envtools'] = 'envtools'
        else:
            self.deb['envtools'] = 'env'

    def debianize(self):

        self.tmpl_dir = os.path.join(mako_template_dir, 'debianize/u-boot')
        pkg_name = self.deb['p_name'] + '-' + self.deb['k_version']

        for tmpl in ['control', 'rules']:
            with open(os.path.join('debian/', tmpl), 'w') as f:
                mako = os.path.join(self.tmpl_dir, tmpl + '.mako')
                f.write(template(mako, self.deb))

        st = os.stat(os.path.join('debian', 'rules'))
        os.chmod(os.path.join('debian', 'rules'), st.st_mode | stat.S_IEXEC)

        cmd = 'dch --package u-boot-' + pkg_name + \
            ' -v ' + self.deb['p_version'] + \
            ' --create -M -D ' + self.deb['release'] + \
            ' "generated by elbe debianize"'
        system(cmd)

        copyfile(os.path.join(self.tmpl_dir, 'u-boot-image.install'),
                 'debian/u-boot-image-' + pkg_name + '.install')
        copyfile(os.path.join(self.tmpl_dir, 'u-boot-tools.install'),
                 'debian/u-boot-tools-' + pkg_name + '.install')

        TUI.printf(
            f"use 'dpkg-buildpackage -a{self.deb['p_arch']}' "
            "to build the package")
