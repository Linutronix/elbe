<schema xmlns="http://www.w3.org/2001/XMLSchema"
        xmlns:rfs="https://www.linutronix.de/projects/Elbe"
        xmlns:ds="http://www.w3.org/2000/09/xmldsig#"
        targetNamespace="https://www.linutronix.de/projects/Elbe"
        elementFormDefault="unqualified"
        attributeFormDefault="unqualified">

  <import namespace="http://www.w3.org/XML/1998/namespace"
	  schemaLocation="http://www.w3.org/2001/03/xml.xsd"/>

  <element name="RootFileSystem" type="rfs:RootFileSystemType">
    <annotation>
      <documentation>
        describes one elbe project. An elbe project contains the creation of a
        build environemt and the definition of a elbe target rootfilesystem.
      </documentation>
    </annotation>
   </element>

  <complexType name="RootFileSystemType">
    <annotation>
      <documentation>
      includes all subelements to define the elbe project
      </documentation>
    </annotation>
    <all>
      <element name="initvm" type="rfs:initvm" minOccurs="0">
        <annotation>
          <documentation>
            Configurations that are used for creating the initvm
            e.g. the definition of the used debian mirrors, suite and buildtype
          </documentation>
        </annotation>
      </element>
      <element name="project" type="rfs:project" minOccurs="0">
        <annotation>
          <documentation>
            Configurations that are used for creating the buildenvironment and
            the target rootfilesystem. e.g. the definition of the used debian
            mirrors.
          </documentation>
        </annotation>
      </element>
      <element name="check-image-list" type="rfs:check-image-list" minOccurs="0">
        <annotation>
          <documentation>
	    Sequence of image to check for emulation.
          </documentation>
        </annotation>
      </element>
      <element name="target" type="rfs:target" minOccurs="0">
        <annotation>
          <documentation>
            Configurations that are used to create the target rootfilesystem
          </documentation>
        </annotation>
      </element>
      <element name="archive" type="base64Binary" minOccurs="0">
        <annotation>
          <documentation>
            tar.bz2 file that contains configuration files for the target
            rootfilesystem. To alter this node use 'elbe chg_archive' and
            to get the content of this node 'elbe get_archive'.
          </documentation>
        </annotation>
      </element>
      <element name="debootstrappkgs" type="rfs:fullpkg-list" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            List of packages installed right after debootstrap
          </documentation>
        </annotation>
      </element>
      <element name="initvmpkgs" type="rfs:fullpkg-list" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            List of packages installed right after debootstrap
          </documentation>
        </annotation>
      </element>
      <element name="initvm_sources_list" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            apt sources list.
          </documentation>
        </annotation>
      </element>
      <element name="initvm_apt_prefs" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            apt preferences list
          </documentation>
        </annotation>
      </element>
      <element name="fullpkgs" type="rfs:fullpkg-list" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            List of packages with their versions installed on the RFS
          </documentation>
        </annotation>
      </element>
      <element name="sources_list" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            apt sources list.
          </documentation>
        </annotation>
      </element>
      <element name="apt_prefs" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            apt preferences list
          </documentation>
        </annotation>
      </element>
      <element name="elbe_version" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            Elbe Version that was used in the last build of this file.
          </documentation>
        </annotation>
      </element>
      <element name="src-cdrom" type="rfs:src-cdrom" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            Configurations of the source CDROM
          </documentation>
        </annotation>
      </element>
    </all>
    <attribute name="created" type="dateTime">
      <annotation>
        <documentation>
          timestamp of creation of the xml file
        </documentation>
      </annotation>
    </attribute>
    <attribute name="revision" type="rfs:revisionNr" use="required">
      <annotation>
        <documentation>
          revision of the xml file (needs to match revision of the schema)
        </documentation>
      </annotation>
    </attribute>
    <attribute ref="xml:base"/>
  </complexType>

  <simpleType name="revisionNr">
    <annotation>
      <documentation>
      is used to decide if your elbe version is compatible
      with the given xml file
      </documentation>
    </annotation>
    <restriction base="integer">
      <minInclusive value="6" />
      <maxInclusive value="6" />
    </restriction>
  </simpleType>

  <complexType name="binary-url">
    <annotation>
      <documentation>
        e.g. "http://myhost/debian /" or "http://debian.org/debian main"
      </documentation>
    </annotation>
    <simpleContent>
      <extension base="rfs:string">
        <attribute name="pin" type="string" use="optional">
          <annotation>
            <documentation>
              Pin-Priority of packages from this source.
            </documentation>
          </annotation>
        </attribute>
        <attribute name="package" type="string" use="optional">
          <annotation>
            <documentation>
              Packages that should be pinned.
            </documentation>
          </annotation>
        </attribute>
      </extension>
    </simpleContent>
  </complexType>

  <complexType name="url">
    <annotation>
      <documentation>
      links to one additional debian mirror
      </documentation>
    </annotation>
    <all>
      <element name="binary" type="rfs:binary-url" minOccurs="0">
        <annotation>
          <documentation>
            e.g. "http://myhost/debian /" or "http://debian.org/debian main"
          </documentation>
        </annotation>
      </element>
      <element name="source" type="string" minOccurs="0">
        <annotation>
          <documentation>
            e.g. "http://myhost/sources /" or "http://debian.org/debian main"
          </documentation>
        </annotation>
      </element>
      <element name="raw-key" type="rfs:string" minOccurs="0">
	<annotation>
          <documentation>
	    Raw Public Key used to sign this Repository
          </documentation>
        </annotation>
      </element>
      <element name="options" type="rfs:mirror-options" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            List of options for this mirror
          </documentation>
        </annotation>
      </element>
    </all>
    <attribute ref="xml:base"/>
  </complexType>

  <complexType name="url-list">
    <annotation>
      <documentation>
      links to additional debian mirrors
      </documentation>
    </annotation>
    <sequence>
      <element name="url" type="rfs:url" minOccurs="0" maxOccurs="unbounded">
        <annotation>
          <documentation>
            describes an additional debian mirror
          </documentation>
        </annotation>
      </element>
    </sequence>
    <attribute ref="xml:base"/>
  </complexType>

  <complexType name="mirror">
    <annotation>
      <documentation>
      specify main and additional debian mirrors
      </documentation>
    </annotation>
    <all>
      <element name="options" type="rfs:mirror-options" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            Options for the primary mirror.
          </documentation>
        </annotation>
      </element>
      <element name="primary_host" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            IP address or hostname of the primary debian mirror
            e.g. "debian.org" without a protocol or any slash
          </documentation>
        </annotation>
      </element>
      <element name="primary_path" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            base path to the debian mirror on the given host
            e.g. "/debian"
          </documentation>
        </annotation>
      </element>
      <element name="primary_proto" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            protocol to access the primary debian mirror
            e.g. "http" or "ftp"
          </documentation>
        </annotation>
      </element>
      <element name="primary_proxy" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            proxy to access the debian mirror
            e.g. "http://me:mypass@myproxy:8080"
          </documentation>
        </annotation>
      </element>
      <element name="cdrom" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            iso image of a cdrom/dvd with debian packages.
          </documentation>
        </annotation>
      </element>
      <element name="host" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            Url of the host mirror.
          </documentation>
        </annotation>
      </element>
      <element name="url-list" type="rfs:url-list" minOccurs="0">
        <annotation>
          <documentation>
            additional debian repositories, e.g. for own debian packages
          </documentation>
        </annotation>
      </element>
    </all>
    <attribute ref="xml:base"/>
  </complexType>

  <complexType name="mirror-options">
    <annotation>
      <documentation>
        List of options for a mirror
      </documentation>
    </annotation>
    <sequence>
      <element name="option" type="rfs:string" minOccurs="0" maxOccurs="unbounded">
        <annotation>
          <documentation>
            e.g. trusted=yes or check-valid-until=no
          </documentation>
        </annotation>
      </element>
    </sequence>
    <attribute ref="xml:base"/>
  </complexType>

  <complexType name="initvm">
    <annotation>
      <documentation>
        describes settings that apply to the creation of the initvm
      </documentation>
    </annotation>
    <all>
      <element name="buildtype" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            Default buildtype like armel, ppc, and in the future armel-virtio
          </documentation>
        </annotation>
      </element>
      <element name="mirror" type="rfs:mirror">
        <annotation>
          <documentation>
            used debian mirrors
          </documentation>
        </annotation>
      </element>
      <element name="noauth" type="rfs:string" minOccurs="0">
        <annotation>
          <documentation>
            allow installation of unsigned debian packages
          </documentation>
        </annotation>
      </element>
      <element name="preference" type="rfs:preference" minOccurs="0">
        <annotation>
          <documentation>
            used for pinning of all packages
            TODO: example?
          </documentation>
        </annotation>
      </element>
      <element name="suite" type="rfs:suite-initvm">
        <annotation>
          <documentation>
            name of the debian suite that should be used to generate the initvm.
            E.g. "buster", "bullseye", "sid", ...
          </documentation>
        </annotation>
      </element>
      <element name="pkg-list" type="rfs:pkg-list" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            additional packages that are installed into the initvm.
          </documentation>
        </annotation>
      </element>
      <element name="preseed" type="rfs:preseed" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            Custom preseeding Values for apt
          </documentation>
        </annotation>
      </element>
      <element name="size" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            size of the virtual harddisk used to run the build environment
          </documentation>
        </annotation>
      </element>
      <element name="mem" type="rfs:memory" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            amount of memory mapped into the virtual build environment
          </documentation>
        </annotation>
      </element>
      <element name="swap-size" type="rfs:memory" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            size of the virtual swap partition used in the build environment.
            this size is subtracted from the size of the virtual harddisk.
	    Supports unit prefixes like GiB, GB, and G.
          </documentation>
        </annotation>
      </element>
      <element name="max-cpus" type="integer" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
	    The number of cpus used by the initvm is clamped to this value.
	    This shall protect the initvm from running out of memory, when
	    running on machines with large numbers of cores.
	    When increasing this value, be sure to also increase mem and
	    maybe add some swap.
          </documentation>
        </annotation>
      </element>
      <element name="img" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            hd image backend format: raw, qcow, vmdk, ...
          </documentation>
        </annotation>
      </element>
      <element name="portforwarding" type="rfs:portforwarding" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            network ports of the buildenvironment that are forwarded to the
            host machine
          </documentation>
        </annotation>
      </element>
      <element name="finetuning" type="rfs:initvm-finetuning" minOccurs="0" maxOccurs="1">
	<annotation>
	  <documentation>
	    Lists of commands to execute or files to create on the
	    initvm at the very end after the debian-installer.
	  </documentation>
	</annotation>
      </element>
    </all>
    <attribute ref="xml:base"/>
  </complexType>

  <complexType name="project">
    <annotation>
      <documentation>
        describes elbe project settings that apply to the creation of the target
        rootfilesystem and include the definition of the build environment
      </documentation>
    </annotation>
    <all>
      <element name="name" type="rfs:string" minOccurs="0">
        <annotation>
          <documentation>
            name of the project this rootfilesystem is associated with
          </documentation>
        </annotation>
      </element>
      <element name="version" type="rfs:string" minOccurs="0">
        <annotation>
          <documentation>
            version of the rootfilesystem definition
          </documentation>
        </annotation>
      </element>
      <element name="description" type="rfs:string" minOccurs="0">
        <annotation>
          <documentation>
            human readable description of the project
          </documentation>
        </annotation>
      </element>
      <element name="buildtype" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            Default buildtype like armel, ppc, and in the future armel-virtio
          </documentation>
        </annotation>
      </element>
      <element name="mirror" type="rfs:mirror">
        <annotation>
          <documentation>
            used debian mirrors
          </documentation>
        </annotation>
      </element>
      <element name="noauth" type="rfs:string" minOccurs="0">
        <annotation>
          <documentation>
            allow installation of unsigned debian packages
          </documentation>
        </annotation>
      </element>
      <element name="preference" type="rfs:preference" minOccurs="0">
        <annotation>
          <documentation>
            used for pinning of all packages
            TODO: example?
          </documentation>
        </annotation>
      </element>
      <element name="raw-preference" type="rfs:raw-preference" minOccurs="0">
        <annotation>
          <documentation>
            gets dedented and striped and is then written to /etc/apt/preferences
            TODO: example?
          </documentation>
        </annotation>
      </element>
      <element name="suite" type="rfs:suite-proj">
        <annotation>
          <documentation>
            name of the debian suite that should be used to generate the
            buildenvironment and the rootfilesystem.
            E.g. "bullseye", "bookworm", "sid", ...
          </documentation>
        </annotation>
      </element>
      <element name="buildimage" type="rfs:buildimage" minOccurs="0">
        <annotation>
          <documentation>
            reference to the buildimage which is used to generate the
            rootfilesystem
          </documentation>
        </annotation>
      </element>
      <element name="preseed" type="rfs:preseed" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            Custom preseeding Values for apt
          </documentation>
        </annotation>
      </element>
    </all>
    <attribute ref="xml:base"/>
  </complexType>

  <complexType name="check-image-list">
    <annotation>
      <documentation>
        Describes a sequence of check to be done on images.
      </documentation>
    </annotation>
    <sequence>
      <element name="check" type="rfs:check-img" minOccurs="0" maxOccurs="10">
      </element>
    </sequence>
  </complexType>

  <complexType name="check-img">
    <all>
      <element name="img" type="rfs:string" minOccurs="1" maxOccurs="1">
        <annotation>
          <documentation>
            Name of the image in the build to emulate.  Image that
            were .tgz are also accepted.
          </documentation>
        </annotation>
      </element>
      <element name="interpreter" type="rfs:string" minOccurs="1" maxOccurs="1">
        <annotation>
          <documentation>
            Name of the interpreter to use for the emulation.  e.g.,
            qemu-system-x86_64 or qemu-system-ppc, etc.
          </documentation>
        </annotation>
      </element>
      <element name="interpreter-opts" type="rfs:string" minOccurs="1" maxOccurs="1">
        <annotation>
          <documentation>
            Options to pass to the interpreter. e.g., -enable-kvm or
            -drive format=raw,file=$ELBE_IMG or -hda $ELBE_IMG

            Word expansion is done before passing it to the
            interpreter.  You can safely assume that the environment
            variable ELBE_IMG contains the absolute path to the target
            image to emulate.
          </documentation>
        </annotation>
      </element>
      <element name="action" type="rfs:check-img-action">
        <annotation>
          <documentation>
            Action to be done on the target image to emulate.
          </documentation>
        </annotation>
      </element>
    </all>
  </complexType>

  <complexType name="check-img-action">
    <annotation>
      <documentation>
        Action to perform on the images of a build.
      </documentation>
    </annotation>
    <choice>
      <element name="login" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            Try to login into root session and shutdown the machine.  The
            element takes an (optional) plain-text password for root.
            Default password is "root".
          </documentation>
        </annotation>
      </element>
      <element name="serial" type="rfs:serial" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            Serial communication to do with the interpreter.  This
            requires '-serial stdio' for QEMU's interpreters.
          </documentation>
        </annotation>
      </element>
    </choice>
  </complexType>

  <complexType name="serial">
    <annotation>
      <documentation>
        Describes a communication to do over a serial line.  The
        communication is done sequentially as it.
      </documentation>
    </annotation>
    <sequence>
      <group ref="rfs:serial-action" minOccurs="0" maxOccurs="unbounded" />
    </sequence>
  </complexType>

  <group name="serial-action">
    <annotation>
      <documentation>
        Definition of possible action on serial communication.
      </documentation>
    </annotation>
    <choice>
        <element name="expect" type="rfs:string" minOccurs="0" maxOccurs="unbounded">
        <annotation>
          <documentation>
            A regular expression to expect to receive on the line.
          </documentation>
        </annotation>
      </element>
      <element name="sendline" type="rfs:string" minOccurs="0" maxOccurs="unbounded">
        <annotation>
          <documentation>
            Send a string terminated with a newline character on the
            line.
          </documentation>
        </annotation>
      </element>
      <element name="EOF" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            Expect the connecion to be closed.  This should only be
            the last item in the sequence.
          </documentation>
        </annotation>
      </element>
    </choice>
  </group>

  <simpleType name="suite-initvm">
    <restriction base="string">
      <enumeration value="sid" />
      <enumeration value="bullseye" />
      <enumeration value="buster" />
    </restriction>
  </simpleType>

  <simpleType name="suite-proj">
    <restriction base="string">
      <enumeration value="sid" />
      <enumeration value="bookworm" />
      <enumeration value="bullseye" />
      <enumeration value="buster" />
      <enumeration value="stretch" />
      <enumeration value="jessie" />

      <enumeration value="jammy" />
      <enumeration value="groovy" />
      <enumeration value="focal" />
      <enumeration value="cosmic" />
      <enumeration value="bionic" />
      <enumeration value="artful" />
      <enumeration value="zesty" />
      <enumeration value="yakkety" />
      <enumeration value="xenial" />
      <enumeration value="wily" />
      <enumeration value="vivid" />
      <enumeration value="utopic" />
      <enumeration value="trusty" />
      <enumeration value="saucy" />
      <enumeration value="raring" />
      <enumeration value="quantal" />
      <enumeration value="precise" />
      <enumeration value="lucid" />
    </restriction>
  </simpleType>

  <complexType name="preference">
    <annotation>
      <documentation>
        describes a global pinning of debian packages
      </documentation>
    </annotation>
    <simpleContent>
      <extension base="rfs:string">
        <attribute name="pin" type="string" use="required">
          <annotation>
            <documentation>
              TODO: format???
            </documentation>
          </annotation>
        </attribute>
      </extension>
    </simpleContent>
  </complexType>

  <complexType name="raw-preference">
    <annotation>
      <documentation>
        content is directly written to /etc/apt/preferences.
      </documentation>
    </annotation>
    <simpleContent>
      <extension base="rfs:string" />
    </simpleContent>
  </complexType>

  <complexType name="buildimage">
    <annotation>
      <documentation>
        definition of the build environment
      </documentation>
    </annotation>
    <all>
      <element name="arch" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            architecture of the target system. e.g. "amd64", "armel", "ppc", ..
          </documentation>
        </annotation>
      </element>
      <element name="size" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            size of the virtual harddisk used to run the build environment
          </documentation>
        </annotation>
      </element>
      <element name="interpreter" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            virtual machine interpreter, e.g. "kvm", "qemu-system-arm", ...
          </documentation>
        </annotation>
      </element>
      <element name="interpreterversion" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            virtual machine interpreter version, e.g. "2.8.0", "1.4.7", ...
          </documentation>
        </annotation>
      </element>
      <element name="kinitrd" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            pkg name of the initrd/kernel package. (obsolete and ignored)
          </documentation>
        </annotation>
      </element>
      <element name="console" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            serial console of the virtual machine, e.g. "ttyAMA0,115200n1"
          </documentation>
        </annotation>
      </element>
      <element name="machine" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            virtual platform to host the build environment,
            e.g. "versatilepb"
          </documentation>
        </annotation>
      </element>
      <element name="triplet" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            The triplet that is used to generate the SDK environment.
          </documentation>
        </annotation>
      </element>
      <element name="NIC" type="rfs:NIC" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            network interface emulation
          </documentation>
        </annotation>
      </element>
      <element name="portforwarding" type="rfs:portforwarding" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            network ports of the buildenvironment that are forwarded to the
            host machine
          </documentation>
        </annotation>
      </element>
      <element name="pkgversionlist" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            create /etc/elbe_pkglist on the target RFS. It includes all packages
            that include files that are used in the target. The list also
            contains the versions of the used packages.
          </documentation>
        </annotation>
      </element>
      <element name="pkg-list" type="rfs:pkg-list" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            additional packages that are only installed into the
            build environment; not into the target root filesystem.
          </documentation>
        </annotation>
      </element>
    </all>
    <attribute ref="xml:base"/>
  </complexType>

  <complexType name="memory">
    <annotation>
      <documentation>
        Helper around memory_restriction to allow XML base attribute
      </documentation>
    </annotation>
    <simpleContent>
      <extension base="rfs:memory_restriction">
	<attribute ref="xml:base"/>
      </extension>
    </simpleContent>
  </complexType>
  
  <simpleType name="memory_restriction">
    <annotation>
      <documentation>
        Memory can be specified using binary unit prefixes like MiB and GiB,
        or SI prefixes like GB,MB or simply G or M.
      </documentation>
    </annotation>
    <restriction base="string">
      <pattern value="(\d+(k|M|G|kB|MB|GB|kiB|MiB|GiB)?)" />
    </restriction>
  </simpleType>
  
  <complexType name="NIC">
     <annotation>
       <documentation>
         describes a virtual network interface
       </documentation>
     </annotation>
    <all>
      <element name="model" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            hardware emulation of the network interface; e.g. "e1000"
          </documentation>
        </annotation>
      </element>
      <element name="MAC" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
             mac address of the virtual network interface
          </documentation>
        </annotation>
      </element>
    </all>
    <attribute ref="xml:base"/>
  </complexType>

  <complexType name="fw_proto">
    <annotation>
      <documentation>
        Helper around fw_proto_restriction to allow XML base attribute
      </documentation>
    </annotation>
    <simpleContent>
      <extension base="rfs:fw_proto_restriction">
	<attribute ref="xml:base"/>
      </extension>
    </simpleContent>
  </complexType>
  
  <simpleType name="fw_proto_restriction">
    <annotation>
      <documentation>
         only tcp and udp are allowed protocols for forwarding
      </documentation>
    </annotation>
    <restriction base="string">
      <enumeration value="tcp" />
      <enumeration value="udp" />
    </restriction>
  </simpleType>

  <complexType name="forward">
    <annotation>
      <documentation>
         forward a network port from the build environment to the host machine
      </documentation>
    </annotation>
    <all>
      <element name="proto" type="rfs:fw_proto" minOccurs="1" maxOccurs="1">
        <annotation>
          <documentation>
            network protocol to forward either "udp" or "tcp"
          </documentation>
        </annotation>
      </element>
      <element name="buildenv" type="integer" minOccurs="1" maxOccurs="1">
        <annotation>
          <documentation>
            port on the buildenvironment, e.g. "22" for ssh
          </documentation>
        </annotation>
      </element>
      <element name="host" type="integer" minOccurs="1" maxOccurs="1">
        <annotation>
          <documentation>
            port on the host machine, e.g. "10022"
          </documentation>
        </annotation>
      </element>
    </all>
    <attribute ref="xml:base"/>
  </complexType>

  <complexType name="portforwarding" >
    <annotation>
      <documentation>
         forward network ports from the build environment to the host machine
      </documentation>
    </annotation>
    <sequence>
      <element name="forward" type="rfs:forward" minOccurs="0" maxOccurs="unbounded">
        <annotation>
          <documentation>
            describes a single port forward
          </documentation>
        </annotation>
      </element>
    </sequence>
    <attribute ref="xml:base"/>
  </complexType>

  <complexType name="target">
    <annotation>
      <documentation>
         configuration of the target rootfilesystem
      </documentation>
    </annotation>
    <all>
      <element name="hostname" type="rfs:string" minOccurs="1" maxOccurs="1">
        <annotation>
          <documentation>
            hostname of the system
          </documentation>
        </annotation>
      </element>
      <element name="domain" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            domainname of the network the target system is part of
          </documentation>
        </annotation>
      </element>
      <element name="passwd_hashed" type="rfs:string" minOccurs="1" maxOccurs="1">
        <annotation>
          <documentation>
            hashed root password
          </documentation>
        </annotation>
      </element>
      <element name="console" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            serial console for getty
          </documentation>
        </annotation>
      </element>
      <element name="debootstrap" type="rfs:debootstrap" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            Bootstrap configuration
          </documentation>
        </annotation>
      </element>
      <element name="package" type="rfs:package" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            package rootfilesystem as a tarball, cpio or a squashfs image
          </documentation>
        </annotation>
      </element>
      <element name="images" type="rfs:images" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            generate (flashable) images of the rootfilesystem
          </documentation>
        </annotation>
      </element>
      <element name="fstab" type="rfs:fstab" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            specify which resources should be mounted
          </documentation>
        </annotation>
      </element>
      <element name="tighten" type="rfs:string" minOccurs="0">
        <annotation>
          <documentation>
            don't install any dependencies; just the content of the given debian
            packages
          </documentation>
        </annotation>
      </element>
      <element name="diet" type="rfs:string" minOccurs="0">
        <annotation>
          <documentation>
            use reverse dependencies of the given debian packages to determine
            the rootfilesystem content; this is useful to get rid of dpkg/apt.
          </documentation>
        </annotation>
      </element>
      <element name="setsel" type="rfs:string" minOccurs="0">
        <annotation>
          <documentation>
            Elbe uses +dpkg --set-selections+ to install packages in the target.
            The rootfs still needs dpkg, and all dependencies need to be
            specified in the pkg-list.
            The target will contain all postinst generated scripts.
          </documentation>
        </annotation>
      </element>
      <element name="install-recommends" type="rfs:string" minOccurs="0">
        <annotation>
          <documentation>
            Activate the installation of recommended Packages.
          </documentation>
        </annotation>
      </element>
      <element name="finetuning" type="rfs:finetuning" minOccurs="0">
        <annotation>
          <documentation>
            apply the given commands to the target rootfilesystem
          </documentation>
        </annotation>
      </element>
      <element name="project-finetuning" type="rfs:project-finetuning" minOccurs="0">
        <annotation>
          <documentation>
            apply the given commands to the project directory, after images have
            been generated. Currently supported use-cases are:
              * extract partition from image and mark as build artifact.
              * mark files as build artifacts
              * mv files from target directory to project directory
          </documentation>
        </annotation>
      </element>
      <element name="pbuilder" type="rfs:pbuilder" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            build and optionaly install debianized sources
          </documentation>
        </annotation>
      </element>
      <element name="pkg-list" type="rfs:pkg-list" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            install the given packages into the rootfilesystem
          </documentation>
        </annotation>
      </element>
      <element name="pkg-blacklist" type="rfs:blacklist" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            avoid installation of packages into sysroot or target
          </documentation>
        </annotation>
      </element>
      <element name="hostsdk-pkg-list" type="rfs:pkg-list" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
	    install the given packages into the hostsdk. (ignores pin and versions,
	    with the current implementation)
          </documentation>
        </annotation>
      </element>
    </all>
    <attribute ref="xml:base"/>
  </complexType>

  <complexType name="debootstrap_variant">
    <annotation>
      <documentation>
        Helper around debootstrap_variant_restriction to allow XML base attribute
      </documentation>
    </annotation>
    <simpleContent>
      <extension base="rfs:debootstrap_variant_restriction">
	<attribute ref="xml:base"/>
      </extension>
    </simpleContent>
  </complexType>

  <simpleType name="debootstrap_variant_restriction">
    <annotation>
      <documentation>
	Restrict the possible debootstrap variants
      </documentation>
    </annotation>
    <restriction base="string">
      <enumeration value="minbase" />
      <enumeration value="buildd" />
      <enumeration value="fakechroot" />
    </restriction>
  </simpleType>

  <complexType name="debootstrap">
    <annotation>
      <documentation>
        Container for debootstrap configuration.
      </documentation>
    </annotation>
    <all>
      <element name="variant" type="rfs:debootstrap_variant" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            Name  of  the  bootstrap  script  variant to use.
            The following variants are supported:
            * minbase: required packages and apt.
            * buildd: build-essential packages.
            * fakechroot: installs the packages without root privileges.
          </documentation>
        </annotation>
      </element>
      <element name="include" type="string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            Comma separated list of packages which will be added to download and
            extract lists.
          </documentation>
        </annotation>
      </element>
      <element name="exclude" type="string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            Comma separated list of packages which will be removed from download
            and extract lists.
            WARNING: you can and probably will exclude essential packages, be
            careful using this option.
          </documentation>
        </annotation>
      </element>
    </all>
  </complexType>

  <complexType name="ubi_type">
    <annotation>
      <documentation>
        Helper around ubi_type_restriction to allow XML base attribute
      </documentation>
    </annotation>
    <simpleContent>
      <extension base="rfs:ubi_type_restriction">
        <attribute ref="xml:base"/>
      </extension>
    </simpleContent>
  </complexType>

  <simpleType name="ubi_type_restriction">
    <annotation>
      <documentation>
        a ubi volume can be either static or dynamic
      </documentation>
    </annotation>
    <restriction base="string">
      <enumeration value="static" />
      <enumeration value="dynamic" />
    </restriction>
  </simpleType>

  <complexType name="ubi">
    <annotation>
      <documentation>
        describes a ubi volume
      </documentation>
    </annotation>
    <all>
      <element name="type" type="rfs:ubi_type" minOccurs="1" maxOccurs="1">
        <annotation>
          <documentation>
            type of the ubi volume; either "static" or "dynamic"
          </documentation>
        </annotation>
      </element>
      <element name="label" type="rfs:string" minOccurs="1" maxOccurs="1">
        <annotation>
          <documentation>
            human readable name of the ubi volume (also used for mount by label)
          </documentation>
        </annotation>
      </element>
      <element name="id" type="integer" minOccurs="1" maxOccurs="1">
        <annotation>
          <documentation>
            id of the ubi volume
          </documentation>
        </annotation>
      </element>
      <element name="size" type="rfs:part_size" minOccurs="1" maxOccurs="1">
        <annotation>
          <documentation>
            size of the ubi volume
          </documentation>
        </annotation>
      </element>
      <element name="binary" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            path and filename of a binary image which will be used as a source
            for this volume; this can be used for example to store the linux
            kernel in a static ubi volume
          </documentation>
        </annotation>
      </element>
      <element name="empty" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
           if binary is used or a label was given that is also available in
           the fstab this tag can be used to force the creation of an empty
           ubi volume.
          </documentation>
        </annotation>
      </element>
    </all>
    <attribute ref="xml:base"/>
  </complexType>

  <complexType name="ubivg">
    <annotation>
      <documentation>
        container for all ubi volumes of a mtd device
      </documentation>
    </annotation>
    <sequence>
      <element name="label" type="rfs:string" minOccurs="1" maxOccurs="1">
        <annotation>
          <documentation>
             human readable name; used to generate filename for the flashable
             image file
          </documentation>
        </annotation>
      </element>
      <element name="miniosize" type="rfs:string" minOccurs="1" maxOccurs="1">
        <annotation>
          <documentation>
             flash parameter minimal i/o size
          </documentation>
        </annotation>
      </element>
      <element name="maxlogicaleraseblockcount" type="rfs:string" minOccurs="1" maxOccurs="1">
        <annotation>
          <documentation>
             flash parameter maximum logical erase block count
          </documentation>
        </annotation>
      </element>
      <element name="logicaleraseblocksize" type="rfs:string" minOccurs="1" maxOccurs="1">
        <annotation>
          <documentation>
             flash parameter logical erase block size
          </documentation>
        </annotation>
      </element>
      <element name="physicaleraseblocksize" type="rfs:string" minOccurs="1" maxOccurs="1">
        <annotation>
          <documentation>
             flash parameter physical erase block size
          </documentation>
        </annotation>
      </element>
      <element name="subpagesize" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
             flash parameter subpagesize
          </documentation>
        </annotation>
      </element>
      <sequence>
        <element name="ubi" type="rfs:ubi" minOccurs="1" maxOccurs="unbounded">
          <annotation>
            <documentation>
               list of ubi volumes
            </documentation>
          </annotation>
        </element>
      </sequence>
    </sequence>
    <attribute ref="xml:base"/>
  </complexType>

  <complexType name="mtd">
    <annotation>
      <documentation>
         describes a mtd device
      </documentation>
    </annotation>
    <all>
      <element name="name" type="rfs:string" minOccurs="1" maxOccurs="1">
        <annotation>
          <documentation>
             human readable name of the mtd device
          </documentation>
        </annotation>
      </element>
      <element name="nr" type="integer" minOccurs="1" maxOccurs="1">
        <annotation>
          <documentation>
             number of the mtd device
          </documentation>
        </annotation>
      </element>
      <element name="size" type="rfs:part_size" minOccurs="1" maxOccurs="1">
        <annotation>
          <documentation>
             size of the mtd device
          </documentation>
        </annotation>
      </element>
      <element name="binary" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            path and filename of a binary image which will be used as a source
            for this mtd device; this can be used for example to store the
            bootloader in the beginning of the flash (mtd0)
          </documentation>
        </annotation>
      </element>
      <element name="ubivg" type="rfs:ubivg" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
             if the mtd will be used to store ubi volumes, this container is
             used to define them
          </documentation>
        </annotation>
      </element>
    </all>
    <attribute ref="xml:base"/>
  </complexType>

  <complexType name="gpthd">
    <annotation>
      <documentation>
         describes a harddisk
      </documentation>
    </annotation>
    <sequence>
      <element name="name" type="rfs:string" minOccurs="1" maxOccurs="1">
        <annotation>
          <documentation>
            human readable name of the harddisk, this will be used as name for
            the image file
          </documentation>
        </annotation>
      </element>
      <element name="size" type="rfs:part_size" minOccurs="1" maxOccurs="1">
        <annotation>
          <documentation>
            size of the harddisk
          </documentation>
        </annotation>
      </element>
      <element name="first_partition_sector" type="rfs:part_size" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            Starting sector for the first partition
          </documentation>
        </annotation>
      </element>
      <element name="grub-install" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            human readable name of the harddisk, this will be used as name for
            the image file
          </documentation>
        </annotation>
      </element>
      <element name="binary" type="rfs:binaryblob" minOccurs="0" maxOccurs="unbounded">
        <annotation>
          <documentation>
            binary blob that is dd'ed to the specified offset
          </documentation>
        </annotation>
      </element>
      <element name="partition" type="rfs:partition" minOccurs="0" maxOccurs="128">
        <annotation>
          <documentation>
            Partition Entries of this harddisk
          </documentation>
        </annotation>
      </element>
    </sequence>
    <attribute ref="xml:base"/>
  </complexType>

  <complexType name="binaryblob">
    <annotation>
      <documentation>
        a binary that is dd'ed to the specified offset
      </documentation>
    </annotation>
    <simpleContent>
      <extension base="rfs:string">
        <attribute name="offset" type="int" use="optional">
          <annotation>
            <documentation>
              byteoffset from the beginning of the image
            </documentation>
          </annotation>
        </attribute>
        <attribute name="blocksize" type="int" use="optional">
          <annotation>
            <documentation>
              blocksize in bytes for the bytewise copy (default 1)
            </documentation>
          </annotation>
        </attribute>
      </extension>
    </simpleContent>
  </complexType>

  <complexType name="msdoshd">
    <annotation>
      <documentation>
         describes a harddisk
      </documentation>
    </annotation>
    <sequence>
      <element name="name" type="rfs:string" minOccurs="1" maxOccurs="1">
        <annotation>
          <documentation>
            human readable name of the harddisk, this will be used as name for
            the image file
          </documentation>
        </annotation>
      </element>
      <element name="size" type="rfs:part_size" minOccurs="1" maxOccurs="1">
        <annotation>
          <documentation>
            size of the harddisk
          </documentation>
        </annotation>
      </element>
      <element name="first_partition_sector" type="rfs:part_size" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            Starting sector for the first partition
          </documentation>
        </annotation>
      </element>
      <element name="grub-install" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            human readable name of the harddisk, this will be used as name for
            the image file
          </documentation>
        </annotation>
      </element>
      <element name="binary" type="rfs:binaryblob" minOccurs="0" maxOccurs="unbounded">
        <annotation>
          <documentation>
            binary blob that is dd'ed to the specified offset
          </documentation>
        </annotation>
      </element>
      <element name="partition" type="rfs:partition" minOccurs="0" maxOccurs="4">
        <annotation>
          <documentation>
            Partition Entries of this harddisk (max: 4)
          </documentation>
        </annotation>
      </element>
      <element name="extended" type="rfs:extended" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            Extended Partition Entries of this harddisk (max: 1)
          </documentation>
        </annotation>
      </element>
      <element name="partition" type="rfs:partition" minOccurs="0" maxOccurs="3">
        <annotation>
          <documentation>
            Partition Entries of this harddisk (max: 3)
          </documentation>
        </annotation>
      </element>
    </sequence>
    <attribute ref="xml:base"/>
  </complexType>

  <complexType name="images">
    <annotation>
      <documentation>
         container for all storage devices of the target
      </documentation>
    </annotation>
    <sequence>
      <element name="mtd" type="rfs:mtd" minOccurs="0" maxOccurs="unbounded">
        <annotation>
          <documentation>
            container for all mtd devices of the target
          </documentation>
        </annotation>
      </element>
      <element name="msdoshd" type="rfs:msdoshd" minOccurs="0" maxOccurs="unbounded">
        <annotation>
          <documentation>
            container for Harddisks with msdos Partitionlabel.
          </documentation>
        </annotation>
      </element>
      <element name="gpthd" type="rfs:gpthd" minOccurs="0" maxOccurs="unbounded">
        <annotation>
          <documentation>
            container for Harddisks with GPT Partitionlabel
          </documentation>
        </annotation>
      </element>
      <element name="passno" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            passno order for fsck
          </documentation>
        </annotation>
      </element>
    </sequence>
    <attribute ref="xml:base"/>
  </complexType>

  <complexType name="fs">
    <annotation>
      <documentation>
         description of a linux filesystem
      </documentation>
    </annotation>
    <all>
      <element name="type" type="rfs:fs_type" minOccurs="1" maxOccurs="1">
        <annotation>
          <documentation>
            filesystemtype, e.g. "ext3", "ubifs", ...
          </documentation>
        </annotation>
      </element>
      <element name="mkfs" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            options passed to the mkfs command
          </documentation>
        </annotation>
      </element>
      <element name="tune2fs" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            options passed to the tune2fs command
          </documentation>
        </annotation>
      </element>
      <element name="passno" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            passno order for fsck
          </documentation>
        </annotation>
      </element>
    </all>
    <attribute ref="xml:base"/>
  </complexType>

  <complexType name="bylabel">
    <annotation>
      <documentation>
         mount storage by the label of the partition or volume
      </documentation>
    </annotation>
    <all>
      <element name="label" type="rfs:string" minOccurs="1" maxOccurs="1">
        <annotation>
          <documentation>
            label of the partition/volume to mount
          </documentation>
        </annotation>
      </element>
      <element name="mountpoint" type="rfs:string" minOccurs="1" maxOccurs="1">
        <annotation>
          <documentation>
            path in the rootfilesystem where the partition/volume is mounted
          </documentation>
        </annotation>
      </element>
      <element name="fs" type="rfs:fs" minOccurs="1" maxOccurs="1">
        <annotation>
          <documentation>
            filesystem of the partition/volume to mount
          </documentation>
        </annotation>
      </element>
      <element name="options" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            options passed to the mount command
          </documentation>
        </annotation>
      </element>
      <element name="nofstab" type="rfs:empty" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
		  This mountpoint shall not be inserted into fstab.
		  Useful for redundant filesystems, where two entries
		  with identical mountpoint would end up in the fstab.
          </documentation>
        </annotation>
      </element>
    </all>
    <attribute ref="xml:base"/>
  </complexType>

  <complexType name="bydev">
    <annotation>
      <documentation>
         mount virtual filesystems or other storage devices device-node
      </documentation>
    </annotation>
    <all>
      <element name="source" type="rfs:string" minOccurs="1" maxOccurs="1">
        <annotation>
          <documentation>
            either a device-node or "none" for virtual filesystems
          </documentation>
        </annotation>
      </element>
      <element name="mountpoint" type="rfs:string" minOccurs="1" maxOccurs="1">
        <annotation>
          <documentation>
            path in the rootfilesystem where the device or virtual filesystem
            is mounted
          </documentation>
        </annotation>
      </element>
      <element name="fs" type="rfs:fs" minOccurs="1" maxOccurs="1">
        <annotation>
          <documentation>
            filesystem of the device or the virtual filesystem name
          </documentation>
        </annotation>
      </element>
      <element name="options" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            options passed to the mount command
          </documentation>
        </annotation>
      </element>
    </all>
    <attribute ref="xml:base"/>
  </complexType>

  <complexType name="fstab">
    <annotation>
      <documentation>
         container for mounts
      </documentation>
    </annotation>
    <sequence>
      <element name="bylabel" type="rfs:bylabel" minOccurs="0" maxOccurs="unbounded">
        <annotation>
          <documentation>
            describes a mount by a volume or partition label
          </documentation>
        </annotation>
      </element>
      <element name="bydev" type="rfs:bydev" minOccurs="0" maxOccurs="unbounded">
        <annotation>
          <documentation>
            describes a mount based on a device node or a mount of a virtual
            filesystem like debugfs or tmpfs
          </documentation>
        </annotation>
      </element>
    </sequence>
    <attribute ref="xml:base"/>
  </complexType>

  <complexType name="package">
    <annotation>
      <documentation>
         list of packages, each contains the hole rootfilesystem
      </documentation>
    </annotation>
    <all>
      <element name="tar" type="rfs:tar" minOccurs="0">
        <annotation>
          <documentation>
             tar package of the rootfilesystem
          </documentation>
        </annotation>
      </element>
      <element name="cpio" type="rfs:cpio" minOccurs="0">
        <annotation>
          <documentation>
             cpio package of the rootfilesystem
          </documentation>
        </annotation>
      </element>
      <element name="squashfs" type="rfs:squashfs" minOccurs="0">
        <annotation>
          <documentation>
             squashfs image of the rootfilesystem
          </documentation>
        </annotation>
      </element>
    </all>
    <attribute ref="xml:base"/>
  </complexType>

  <complexType name="tar">
    <annotation>
      <documentation>
         describes a tar package
      </documentation>
    </annotation>
    <all>
      <element name="name" type="rfs:string" minOccurs="0">
        <annotation>
          <documentation>
             filename of the tar package
          </documentation>
        </annotation>
      </element>
      <element name="options" type="rfs:string" minOccurs="0">
        <annotation>
          <documentation>
             options passed to the tar command
          </documentation>
        </annotation>
      </element>
    </all>
    <attribute ref="xml:base"/>
  </complexType>

  <complexType name="cpio">
    <annotation>
      <documentation>
         describes a cpio package
      </documentation>
    </annotation>
    <all>
      <element name="name" type="rfs:string" minOccurs="0">
        <annotation>
          <documentation>
             filename of the cpio package 
          </documentation>
        </annotation>
      </element>
    </all>
    <attribute ref="xml:base"/>
  </complexType>

  <complexType name="squashfs">
    <annotation>
      <documentation>
         describes a squashfs image
      </documentation>
    </annotation>
    <all>
      <element name="name" type="rfs:string" minOccurs="0">
        <annotation>
          <documentation>
             filename of the squashfs image
          </documentation>
        </annotation>
      </element>
      <element name="options" type="rfs:string" minOccurs="0">
        <annotation>
          <documentation>
             options passed to the mksquashfs command
          </documentation>
        </annotation>
      </element>
    </all>
    <attribute ref="xml:base"/>
  </complexType>

  <complexType name="partition">
    <annotation>
      <documentation>
         describes a partition of a harddisk
      </documentation>
    </annotation>
    <all>
      <element name="size" type="rfs:part_size">
        <annotation>
          <documentation>
             size of the partition
          </documentation>
        </annotation>
      </element>
      <element name="label" type="rfs:string" minOccurs="1">
        <annotation>
          <documentation>
             human readable label of the partition used for mount by label and
             as filename for the flashable image
          </documentation>
        </annotation>
      </element>
      <element name="name" type="rfs:string" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
             human readable name of the partition used for naming a gpt partition
          </documentation>
        </annotation>
      </element>
      <element name="binary" type="rfs:string" minOccurs="0">
        <annotation>
          <documentation>
            path and filename of a binary image which will be used as a source
	    for this volume; this can be used for example to store a bootloader
	    in a partition.
          </documentation>
        </annotation>
      </element>
      <element name="bootable" type="rfs:string" minOccurs="0">
        <annotation>
          <documentation>
             Whether this partition is marked bootable.
          </documentation>
        </annotation>
      </element>
      <element name="biosgrub" type="rfs:string" minOccurs="0">
        <annotation>
          <documentation>
             Whether this partition is marked as biosgrub partition.
          </documentation>
        </annotation>
      </element>
    </all>
    <attribute ref="xml:base"/>
  </complexType>

  <complexType name="extended">
    <annotation>
      <documentation>
         describes a extended partition of a harddisk
      </documentation>
    </annotation>
    <sequence>
      <element name="size" type="rfs:part_size">
        <annotation>
          <documentation>
             size of the partition
          </documentation>
        </annotation>
      </element>
      <element name="logical" type="rfs:partition" minOccurs="0" maxOccurs="unbounded">
        <annotation>
          <documentation>
             logical partition of this extended partition
          </documentation>
        </annotation>
      </element>
    </sequence>
    <attribute ref="xml:base"/>
  </complexType>

  <complexType name="part_size">
    <annotation>
      <documentation>
        Helper around part_size_restriction to allow XML base attribute
      </documentation>
    </annotation>
    <simpleContent>
      <extension base="rfs:part_size_restriction">
	<attribute ref="xml:base"/>
      </extension>
    </simpleContent>
  </complexType>
  
  <simpleType name="part_size_restriction">
    <annotation>
      <documentation>
         format of the partition size
      </documentation>
    </annotation>
    <restriction base="string">
      <pattern value="(\d+(k|M|G|kB|MB|GB|kiB|MiB|GiB)?|remain)" />
    </restriction>
  </simpleType>

  <complexType name="part_nr">
    <annotation>
      <documentation>
        Helper around part_nr_restriction to allow XML base attribute
      </documentation>
    </annotation>
    <simpleContent>
      <extension base="rfs:part_nr_restriction">
	<attribute ref="xml:base"/>
      </extension>
    </simpleContent>
  </complexType>
  
  <simpleType name="part_nr_restriction">
    <annotation>
      <documentation>
         allow maximum 4 primary partitions
      </documentation>
    </annotation>
    <restriction base="integer">
      <minInclusive value="1" />
      <maxInclusive value="4" />
    </restriction>
  </simpleType>

  <complexType name="part_type">
    <annotation>
      <documentation>
        Helper around part_type_restriction to allow XML base attribute
      </documentation>
    </annotation>
    <simpleContent>
      <extension base="rfs:part_type_restriction">
	<attribute ref="xml:base"/>
      </extension>
    </simpleContent>
  </complexType>
  
  <simpleType name="part_type_restriction">
    <annotation>
      <documentation>
         list of supported partition types
      </documentation>
    </annotation>
    <restriction base="string">
      <enumeration value="linux" />
      <enumeration value="swap" />
    </restriction>
  </simpleType>

  <complexType name="fs_type">
    <annotation>
      <documentation>
        Helper around fs_type_restriction to allow XML base attribute
      </documentation>
    </annotation>
    <simpleContent>
      <extension base="rfs:fs_type_restriction">
	<attribute ref="xml:base"/>
      </extension>
    </simpleContent>
  </complexType>
  
  <simpleType name="fs_type_restriction">
    <annotation>
      <documentation>
         list of supported filesystems
      </documentation>
    </annotation>
    <restriction base="string">
      <enumeration value="ext2" />
      <enumeration value="ext3" />
      <enumeration value="ext4" />
      <enumeration value="ubifs" />
      <enumeration value="tmpfs" />
      <enumeration value="debugfs" />
      <enumeration value="configfs" />
      <enumeration value="devpts" />
      <enumeration value="proc" />
      <enumeration value="sysfs" />
      <enumeration value="vfat" />
      <enumeration value="btrfs" />
      <enumeration value="devtmpfs" />
      <enumeration value="swap" />
    </restriction>
  </simpleType>


  <complexType name="initvm-finetuning">
    <annotation>
      <documentation>
         container for initvm-finetuning actions; these actions are
         executed at the end of the init-elbe.sh script in the target.
      </documentation>
    </annotation>
    <sequence>
      <group ref="rfs:initvm-action" minOccurs="0" maxOccurs="unbounded" />
    </sequence>
    <attribute ref="xml:base"/>
  </complexType>

  <group name="initvm-action">
    <annotation>
      <documentation>
        definition of initvm-finetuning actions
      </documentation>
    </annotation>
    <choice>
      <element name="command" type="rfs:string" minOccurs="0">
        <annotation>
          <documentation>
	    execute a shell command in the target
          </documentation>
        </annotation>
      </element>
    </choice>
  </group>

  <complexType name="finetuning">
    <annotation>
      <documentation>
         container for finetuning commands; these commands are executed in the
         root of the target filesystem after the target filesystem was created
      </documentation>
    </annotation>
    <sequence>
      <group ref="rfs:action" minOccurs="0" maxOccurs="unbounded" />
    </sequence>
    <attribute ref="xml:base"/>
  </complexType>

  <group name="action">
    <annotation>
      <documentation>
        definition of finetuning commands
      </documentation>
    </annotation>
    <choice>
      <element name="addgroup" type="rfs:addgroup" minOccurs="0">
        <annotation>
          <documentation>
            add a group by name
          </documentation>
        </annotation>
      </element>
      <element name="adduser" type="rfs:adduser" minOccurs="0">
        <annotation>
          <documentation>
            add a user account by login name
          </documentation>
        </annotation>
      </element>
      <element name="file" type="rfs:file" minOccurs="0">
        <annotation>
          <documentation>
	    write or append text to a file
          </documentation>
        </annotation>
      </element>
      <element name="rm" type="rfs:rm" minOccurs="0">
        <annotation>
          <documentation>
            remove a file or directory (recursive). Also allows specifying an exclude pattern.
          </documentation>
        </annotation>
      </element>
      <element name="cp" type="rfs:cpmv" minOccurs="0">
        <annotation>
          <documentation>
            copy a file or directory (recursive)
          </documentation>
        </annotation>
      </element>
      <element name="ln" type="rfs:cpmv" minOccurs="0">
        <annotation>
          <documentation>
            create a symbolic link
          </documentation>
        </annotation>
      </element>
      <element name="buildenv_cp" type="rfs:cpmv" minOccurs="0">
        <annotation>
          <documentation>
            copy a file or directory (recursive)
          </documentation>
        </annotation>
      </element>
      <element name="b2t_cp" type="rfs:cpmv" minOccurs="0">
        <annotation>
          <documentation>
            copy a file or directory (recursive)
          </documentation>
        </annotation>
      </element>
      <element name="t2b_cp" type="rfs:cpmv" minOccurs="0">
        <annotation>
          <documentation>
            copy a file or directory (recursive)
          </documentation>
        </annotation>
      </element>
      <element name="mv" type="rfs:cpmv" minOccurs="0">
        <annotation>
          <documentation>
            move a file or directory
          </documentation>
        </annotation>
      </element>
      <element name="buildenv_mv" type="rfs:cpmv" minOccurs="0">
        <annotation>
          <documentation>
            move a file or directory
          </documentation>
        </annotation>
      </element>
      <element name="t2p_mv" type="rfs:cpmv" minOccurs="0">
        <annotation>
          <documentation>
            move a file from the target to the project directory
          </documentation>
        </annotation>
      </element>
      <element name="mkdir" type="rfs:string" minOccurs="0">
        <annotation>
          <documentation>
            create a directory
          </documentation>
        </annotation>
      </element>
      <element name="buildenv_mkdir" type="rfs:string" minOccurs="0">
        <annotation>
          <documentation>
            create a directory
          </documentation>
        </annotation>
      </element>
      <element name="mknod" type="rfs:mknod" minOccurs="0">
        <annotation>
          <documentation>
            move a file or directory
          </documentation>
        </annotation>
      </element>
      <element name="purge" type="rfs:string" minOccurs="0">
        <annotation>
          <documentation>
            purge a debian package out of the rootfilesystem
          </documentation>
        </annotation>
      </element>
      <element name="raw_cmd" type="rfs:string" minOccurs="0">
        <annotation>
          <documentation>
            execute the defined command
          </documentation>
        </annotation>
      </element>
      <element name="command" type="rfs:string" minOccurs="0">
        <annotation>
          <documentation>
            execute the defined command in /bin/sh
          </documentation>
        </annotation>
      </element>
      <element name="buildenv_command" type="rfs:string" minOccurs="0">
        <annotation>
          <documentation>
            execute the defined command
          </documentation>
        </annotation>
      </element>
      <element name="updated" type="rfs:string" minOccurs="0">
        <annotation>
          <documentation>
            include the base debian repository in the target rfs to enable
            downgrades via elbe-updated
          </documentation>
        </annotation>
      </element>
      <element name="artifact" type="rfs:string" minOccurs="0">
        <annotation>
          <documentation>
            make the named file an artifact. The path is relative to the
            target root.
          </documentation>
        </annotation>
      </element>
      <element name="rm_apt_source" type="rfs:string" minOccurs="0">
        <annotation>
          <documentation>
            remove the specified source from the sources.list on the target
          </documentation>
        </annotation>
      </element>
    </choice>
  </group>

  <complexType name="project-finetuning">
    <annotation>
      <documentation>
         container for project-finetuning commands; these commands are executed in the
         project directory, after the images have been generated.
      </documentation>
    </annotation>
    <sequence>
      <group ref="rfs:project-action" minOccurs="0" maxOccurs="unbounded" />
    </sequence>
    <attribute ref="xml:base"/>
  </complexType>

  <group name="project-action">
    <annotation>
      <documentation>
        definition of finetuning commands
      </documentation>
    </annotation>
    <choice>
      <element name="t2p_mv" type="rfs:cpmv" minOccurs="0">
        <annotation>
          <documentation>
            move a file from the target to the project directory
          </documentation>
        </annotation>
      </element>
      <element name="artifact" type="rfs:string" minOccurs="0">
        <annotation>
          <documentation>
            make the named file an artifact. The path is relative
            to the project directory.
          </documentation>
        </annotation>
      </element>
      <element name="rm_artifact" type="rfs:string" minOccurs="0">
        <annotation>
          <documentation>
            remove a project artifact from the list of artifacts.
          </documentation>
        </annotation>
      </element>
      <element name="losetup" type="rfs:losetup" minOccurs="0">
        <annotation>
          <documentation>
            Setup the loop device with an image file. This node wraps image_finetuning
            Actions, which access the loop device then.
          </documentation>
        </annotation>
      </element>
      <element name="img_convert" type="rfs:img_convert" minOccurs="0">
        <annotation>
          <documentation>
	    Convert a Partitionimage to another format. The new Image is added to
	    the list of artifacts.
          </documentation>
        </annotation>
      </element>
      <element name="set_packer" type="rfs:set_packer" minOccurs="0">
        <annotation>
          <documentation>
	    Specify the packer to use for an artifact.
          </documentation>
        </annotation>
      </element>
      <element name="unit-tests" type="rfs:unit-tests" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
	    Allows to generate test suites for the project.
          </documentation>
        </annotation>
      </element>
    </choice>
  </group>

  <complexType name="losetup">
    <annotation>
      <documentation>
         Container for image_finetuning commands; these commands are executed in the
         project directory, while a drive image is setup as a loop device.
         The loop device id is passed to the individual actions.
      </documentation>
    </annotation>
    <sequence>
      <group ref="rfs:image_action" minOccurs="0" maxOccurs="unbounded" />
    </sequence>
    <attribute ref="xml:base"/>
    <attribute name="img" type="string" use="required" />
  </complexType>

  <group name="image_action">
    <annotation>
      <documentation>
        definition of image finetuning commands
      </documentation>
    </annotation>
    <choice>
      <element name="extract_partition" type="rfs:extract_partition" minOccurs="0">
        <annotation>
          <documentation>
            Extract a Partition from the currently mounted loop device.
          </documentation>
        </annotation>
      </element>
      <element name="copy_from_partition" type="rfs:copy_from_partition" minOccurs="0">
        <annotation>
          <documentation>
	    Copy a file from a partition. The partition is mounted, and the file is then
	    copied from the mounted filesystem into the builddir. Its marked as an Artifact.
          </documentation>
        </annotation>
      </element>
      <element name="copy_to_partition" type="rfs:copy_to_partition" minOccurs="0">
        <annotation>
          <documentation>
	    Copy an artifact onto a partition. The partition is mounted, and the file is then
	    copied into the mounted filesystem.
          </documentation>
        </annotation>
      </element>
      <element name="set_partition_type" type="rfs:set_partition_type" minOccurs="0">
        <annotation>
          <documentation>
	    Set the type of a partition via fdisk. (to support esoteric partition types,
	    that parted does not support.)
          </documentation>
        </annotation>
      </element>
      <element name="command" type="rfs:partition-command" minOccurs="0" maxOccurs="unbounded">
        <annotation>
          <documentation>
	    Execute a command with a partition mounted.  Before the
	    comand is executed, the environment variable ELBE_MNT is
	    set to the absolute filepath to the mount point.
          </documentation>
        </annotation>
      </element>
    </choice>
  </group>

  <complexType name="extract_partition">
    <annotation>
      <documentation>
        Describe the partition to be extracted (nr) and the destination filename.
	The value of the tag describes the filename of the generated Imagefile.
	The Image is per default compressed with gzip afterwards.
      </documentation>
    </annotation>
    <simpleContent>
      <extension base="rfs:string">
        <attribute name="part" type="integer" use="required" />
      </extension>
    </simpleContent>
  </complexType>

    <complexType name="partition-command">
    <annotation>
      <documentation>
	The node's text should be a valid shell commands
      </documentation>
    </annotation>
    <simpleContent>
      <extension base="rfs:string">
        <attribute name="part" type="integer" use="required" />
        <attribute name="nomount" type="boolean" use="optional" />
      </extension>
    </simpleContent>
  </complexType>

  <complexType name="copy_from_partition">
    <annotation>
      <documentation>
        Attribute 'part' describes the partition to be mounted (nr).
	The value of the tag describes the filename to be copied from the
	Filesystem, after it has been mounted.
	Attribute 'artifact' is the artifact name.
      </documentation>
    </annotation>
    <simpleContent>
      <extension base="rfs:string">
        <attribute name="part" type="integer" use="required" />
        <attribute name="artifact" type="string" use="required" />
      </extension>
    </simpleContent>
  </complexType>
  <complexType name="copy_to_partition">
    <annotation>
      <documentation>
        Attribute 'part' describes the partition to be mounted (nr).
	The value of the tag describes the filename where the artifact shall
	be copied to, onto the filesystem, after it has been mounted.
	Attribute 'artifact' is the artifact name.
      </documentation>
    </annotation>
    <simpleContent>
      <extension base="rfs:string">
        <attribute name="part" type="integer" use="required" />
        <attribute name="artifact" type="string" use="required" />
      </extension>
    </simpleContent>
  </complexType>
  <complexType name="set_partition_type">
    <annotation>
      <documentation>
        Attribute 'part' describes the partition to be modified (nr).
	Attribute 'type' is the numerical partition id, as understood by
	fdisk.
      </documentation>
    </annotation>
    <attribute name="part" type="integer" use="required" />
    <attribute name="type" type="string" use="required" />
  </complexType>
  <complexType name="addgroup">
    <annotation>
      <documentation>
        describes an additional user group to be created. the following parameters are
	available:
	'gid' - group id.
	'system = "True" - system group.
	The value of the tag describes the group name name
        for the account.
      </documentation>
    </annotation>
    <simpleContent>
      <extension base="rfs:string">
        <attribute name="gid" type="string" use="optional" />
        <attribute name="system" type="boolean" use="optional" />
      </extension>
    </simpleContent>
  </complexType>

  <complexType name="img_convert">
    <annotation>
      <documentation>
        Describe the Image to be converted.
	The value of the tag describes the filename of the source Imagefile.
	The dst attribute the destination filename, and the fmt attribute is
	the format. (See 'qemu-img --help' for a list of possible formats)
	The Image is per default compressed with gzip afterwards.
      </documentation>
    </annotation>
    <simpleContent>
      <extension base="rfs:string">
        <attribute name="dst" type="string" use="required" />
        <attribute name="fmt" type="string" use="required" />
        <attribute name="keep_src" type="boolean" use="optional" />
      </extension>
    </simpleContent>
  </complexType>

  <complexType name="set_packer">
    <annotation>
      <documentation>
        Set the packer to use for an artifaxct.
	The value of the tag describes the filename of the Imagefile.
	The packer attribute may take the following values:
	(none, gzip, zstd, tar, targz, tarxz, tarzstd)
      </documentation>
    </annotation>
    <simpleContent>
      <extension base="rfs:string">
        <attribute name="packer" type="rfs:packer-type" use="required" />
      </extension>
    </simpleContent>
  </complexType>

  <simpleType name="packer-type">
    <restriction base="string">
      <enumeration value="none" />
      <enumeration value="gzip" />
      <enumeration value="zstd" />
      <enumeration value="tar" />
      <enumeration value="tarxz" />
      <enumeration value="targz" />
      <enumeration value="tarzstd" />
    </restriction>
  </simpleType>

    <complexType name="file">
    <annotation>
      <documentation>
        write or append text to a file, the following parameters
        are avaible:

        'dst' - the destination to write to
        'encoding' - the (optional) encoding of the content
        'append="True"' - append the content to file instead of writing
        'owner' - (optional) set file owner
        'group' - (optional) set group ownership
        'mode' - (optional) set file mode bits

        The value of the tag is the raw/encoded content to
        write/append to the destination
      </documentation>
    </annotation>
    <simpleContent>
      <extension base="rfs:string">
        <attribute name="dst"      type="string"  use="required" />
        <attribute name="encoding" type="string"  use="optional" />
        <attribute name="append"   type="boolean" use="optional" />
        <attribute name="owner"    type="string"  use="optional" />
        <attribute name="group"    type="string"  use="optional" />
        <attribute name="mode"     type="string"  use="optional" />
      </extension>
    </simpleContent>
  </complexType>

  <complexType name="adduser">
    <annotation>
      <documentation>
        describes an additional user account, the following parameters are
	available:
	'shell' - the login shell for the user.
	'passwd' - the (optional) password for the user.
	'groups' - a comma separated list of groups the user is member of.
	'uid' - (optional) user of the user.
	'gid' - (optional) primary group, may be numeric or a name.
	'home' - home directory.
	'system="True"' - system user.
	'create_home="False"' - do not create the home directory.
	'create_group = "False"' - Do not create the primary group.
	The value of the tag describes the login name for the account.
      </documentation>
    </annotation>
    <simpleContent>
      <extension base="rfs:string">
        <attribute name="shell" type="string" use="required" />
        <attribute name="passwd" type="string" use="optional" />
        <attribute name="groups" type="string" use="optional" />
        <attribute name="uid" type="string" use="optional" />
        <attribute name="gid" type="string" use="optional" />
        <attribute name="home" type="string" use="optional" />
        <attribute name="system" type="boolean" use="optional" />
        <attribute name="create_home" type="boolean" use="optional" />
        <attribute name="create_group" type="boolean" use="optional" />
      </extension>
    </simpleContent>
  </complexType>

  <complexType name="cpmv">
    <annotation>
      <documentation>
        describes a copy or move of an element in the rootfilesystem
      </documentation>
    </annotation>
    <simpleContent>
      <extension base="rfs:string">
        <attribute name="path" type="string" use="required" />
      </extension>
    </simpleContent>
  </complexType>

  <complexType name="rm">
    <annotation>
      <documentation>
	      describes a removal of a pattern from the rootfilesystem.
	      Including an exclude pattern
      </documentation>
    </annotation>
    <simpleContent>
      <extension base="rfs:string">
        <attribute name="exclude" type="string" use="optional" />
      </extension>
    </simpleContent>
  </complexType>

  <complexType name="mknod">
    <annotation>
      <documentation>
        describes a mknod operaition in finetuning
      </documentation>
    </annotation>
    <simpleContent>
      <extension base="rfs:string">
        <attribute name="opts" type="string" use="required" />
      </extension>
    </simpleContent>
  </complexType>

  <complexType name="git_src">
    <annotation>
      <documentation>
        URI of the git repository, e.g. "git://myhost/myrepo.git"
      </documentation>
    </annotation>
    <simpleContent>
      <extension base="rfs:string">
        <attribute name="revision" type="string" use="optional" />
      </extension>
    </simpleContent>
  </complexType>

  <complexType name="svn_src">
    <annotation>
      <documentation>
        URI of the svn repository, e.g. "svn://myhost/myrepo/tags/my_tag"
      </documentation>
    </annotation>
    <simpleContent>
      <extension base="rfs:string">
        <attribute name="revision" type="string" use="optional" />
      </extension>
    </simpleContent>
  </complexType>

  <complexType name="pkg">
    <annotation>
      <documentation>
        describes a debian binary package
      </documentation>
    </annotation>
    <simpleContent>
      <extension base="rfs:string">
        <attribute name="pin" type="string" use="optional">
          <annotation>
            <documentation>
              prefer the defined version of the debian package
            </documentation>
          </annotation>
        </attribute>
        <attribute name="version" type="string" use="optional">
          <annotation>
            <documentation>
              version of the package
            </documentation>
          </annotation>
        </attribute>
        <attribute name="auto" type="boolean" use="optional">
          <annotation>
            <documentation>
              installed automatically as a dependency
            </documentation>
          </annotation>
        </attribute>
        <attribute name="md5" type="string" use="optional">
          <annotation>
            <documentation>
              md5 sum of the package.
            </documentation>
          </annotation>
        </attribute>
        <attribute name="sha256" type="string" use="optional">
          <annotation>
            <documentation>
              sha256 sum of the package.
            </documentation>
          </annotation>
        </attribute>
        <attribute name="prio" type="string" use="optional">
          <annotation>
            <documentation>
              priority of the package in the original repository.
            </documentation>
          </annotation>
        </attribute>
        <attribute name="on_src_cd" type="string" use="optional">
          <annotation>
            <documentation>
                If set to "False" the source will not be included on the source cdrom.
            </documentation>
          </annotation>
        </attribute>
      </extension>
    </simpleContent>
  </complexType>

  <complexType name="pbuilder">
    <annotation>
      <documentation>
        reference to debian source packages
      </documentation>
    </annotation>
    <sequence>
      <element name="src-pkg" type="rfs:string" minOccurs="0" maxOccurs="unbounded">
        <annotation>
          <documentation>
            reference to a debian source package from a deb-src archive. The
            source will be built with a pbuilder before the image generation.
          </documentation>
        </annotation>
      </element>
      <element name="git" type="rfs:git_src" minOccurs="0" maxOccurs="unbounded">
        <annotation>
          <documentation>
            reference to a git tree hosting a debian source package. The source
            will be built with a pbuilder before the image generation.
          </documentation>
        </annotation>
      </element>
      <element name="svn" type="rfs:svn_src" minOccurs="0" maxOccurs="unbounded">
        <annotation>
          <documentation>
            reference to a svn repository hosting a debian source package. The
            source will be built with a pbuilder before the image generation.
          </documentation>
        </annotation>
      </element>
    </sequence>
    <attribute ref="xml:base"/>
  </complexType>

  <complexType name="pkg-list">
    <annotation>
      <documentation>
        container of debian packages
      </documentation>
    </annotation>
    <sequence>
      <element name="pkg" type="rfs:pkg" minOccurs="0" maxOccurs="unbounded">
        <annotation>
          <documentation>
            reference to a binary debian package which will be installed from
            the given mirrors into the target rootfilesystem.
          </documentation>
        </annotation>
      </element>
    </sequence>
    <attribute ref="xml:base"/>
  </complexType>

  <complexType name="blacklist">
    <annotation>
      <documentation>
        blacklists of debian packages
      </documentation>
    </annotation>
    <sequence>
        <element name="sysroot" type="rfs:pkg-list" minOccurs="0" maxOccurs="unbounded">
          <annotation>
            <documentation>
              avoid installing the specified packages into the sysroot
            </documentation>
          </annotation>
        </element>
    </sequence>
    <attribute ref="xml:base"/>
  </complexType>

  <complexType name="fullpkg-list">
    <annotation>
      <documentation>
        List of packages to be validated against the installed list.
      </documentation>
    </annotation>
    <sequence>
      <element name="pkg" type="rfs:pkg" minOccurs="0" maxOccurs="unbounded">
        <annotation>
          <documentation>
            Reference to a binary debian package which is supposed to be installed.
          </documentation>
        </annotation>
      </element>
    </sequence>
    <attribute ref="xml:base"/>
  </complexType>

  <complexType name="conf">
    <annotation>
      <documentation>
        describes a preseeding entry
      </documentation>
    </annotation>
    <simpleContent>
      <extension base="rfs:string">
        <attribute name="owner" type="string" use="required">
          <annotation>
            <documentation>
              owner package of the config entry
            </documentation>
          </annotation>
        </attribute>
        <attribute name="key" type="string" use="required">
          <annotation>
            <documentation>
              key name of the entry
            </documentation>
          </annotation>
        </attribute>
        <attribute name="type" type="string" use="required">
          <annotation>
            <documentation>
              type of the config entry
            </documentation>
          </annotation>
        </attribute>
        <attribute name="value" type="string" use="required">
          <annotation>
            <documentation>
              value of the config entry
            </documentation>
          </annotation>
        </attribute>
      </extension>
    </simpleContent>
  </complexType>

  <complexType name="preseed">
    <annotation>
      <documentation>
        container of config entries
      </documentation>
    </annotation>
    <sequence>
      <element name="conf" type="rfs:conf" minOccurs="0" maxOccurs="unbounded">
        <annotation>
          <documentation>
            A config entry
          </documentation>
        </annotation>
      </element>
    </sequence>
    <attribute ref="xml:base"/>
  </complexType>

  <complexType name="empty">
    <annotation>
      <documentation>
        This element just acts like a flag. It might be there, or not.
      </documentation>
    </annotation>
  </complexType>

  <complexType name="string">
    <annotation>
      <documentation>
        E.L.B.E. standard string. Allow XML base attribute.
      </documentation>
    </annotation>
    <simpleContent>
      <extension base="string">
         <attribute ref="xml:base"/>
      </extension>
    </simpleContent>
  </complexType>

  <complexType name="unit-tests">
    <annotation>
      <documentation>
	Sequence of test suites.  The require attribute 'dst' is the
	name of the file where the Junit XML file will be dump
	relative to the project directory.
      </documentation>
    </annotation>
    <sequence>
      <element name="test-suite" type="rfs:test-suite" minOccurs="0" maxOccurs="unbounded">
      </element>
    </sequence>
  </complexType>

  <complexType name="test-suite">
    <annotation>
      <documentation>
	A test suite is a sequence of test cases.  The required
	attribute name is the an human readable identifier for the
	test suite.
      </documentation>
    </annotation>
    <sequence>
      <group ref="rfs:test-case" minOccurs="0" maxOccurs="unbounded" >
      </group>
    </sequence>
    <attribute name="name" type="string" use="required" />
  </complexType>

  <group name="test-case">
    <annotation>
      <documentation>
	A test-case is a choice of a test to make on the target fs.
      </documentation>
    </annotation>
    <choice>
      <element name="file-exists" type="rfs:string" minOccurs="0">
	<annotation>
          <documentation>
	    Verify that a file exists.
          </documentation>
        </annotation>
      </element>
    </choice>
  </group>

  <complexType name="src-cdrom">
    <annotation>
      <documentation>
         Configuration of the src-cdrom
      </documentation>
    </annotation>
    <sequence>
      <element name="size" type="rfs:memory" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            The size limit for each source cdrom ISO image.
            The files are distributed on several cdroms as needed.
            Omitting this element means no size limit.
          </documentation>
        </annotation>
      </element>
      <element name="src-opts" type="rfs:iso-opts" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            Options for the source cdrom ISO images.
          </documentation>
        </annotation>
      </element>
      <element name="archive" type="rfs:src-cdrom-archive" minOccurs="0" maxOccurs="unbounded">
        <annotation>
          <documentation>
                tar.bz2 file that contains base64 encoded files for the source
                cdrom.
          </documentation>
        </annotation>
      </element>
    </sequence>
    <attribute ref="xml:base"/>
  </complexType>

  <complexType name="src-cdrom-archive">
   <annotation>
     <documentation>
       Holds a base64 encoded tar.bz2 file that is added to the src-cdrom.
     </documentation>
   </annotation>
   <simpleContent>
     <extension base="base64Binary">
       <attribute name="volume" type="rfs:volume-type">
	 <annotation>
	   <documentation>
	     Use this to control where the archive is stored when using
	     split src-cdroms.
	     It consists of a comma-separated list of volume numbers.
	     A volume number can be 0 to n-1 for n equals the number
	     of volumes if the src-cdrom is split.
	     A volume number can also be negative to identify a volume
	     beginning from the last index.
	     (-1: last, -2: second last, ...)
	     If you do not specify this attribute, the archive is added
	     to each volume.
	   </documentation>
	 </annotation>
       </attribute>
     </extension>
   </simpleContent>
  </complexType>

  <simpleType name="volume-type">
     <restriction base="string">
       <pattern value="(-?\d+,)*-?\d+|all"/>
     </restriction>
  </simpleType>

  <complexType name="iso-opts">
    <annotation>
      <documentation>
        ISO image options passed to genisoimage(1).
      </documentation>
    </annotation>
    <all>
      <element name="abstract" type="rfs:string" minOccurs="0" maxOccurs="1"></element>
      <element name="app" type="rfs:string" minOccurs="0" maxOccurs="1"></element>
      <element name="biblio" type="rfs:string" minOccurs="0" maxOccurs="1"></element>
      <element name="copyright" type="rfs:string" minOccurs="0" maxOccurs="1"></element>
      <element name="publisher" type="rfs:string" minOccurs="0" maxOccurs="1"></element>
      <element name="preparer" type="rfs:string" minOccurs="0" maxOccurs="1"></element>
      <element name="sysid" type="rfs:string" minOccurs="0" maxOccurs="1"></element>
      <element name="volid" type="rfs:string" minOccurs="0" maxOccurs="1"></element>
      <element name="volset" type="rfs:string" minOccurs="0" maxOccurs="1"></element>
    </all>
    <attribute name="strict" type="boolean" use="optional">
      <annotation>
        <documentation>
          If set to "true", fails in preprocessing stage if an option
          doesn't respect ISO-9660.  The default is "false".
        </documentation>
      </annotation>
    </attribute>
  </complexType>

</schema>
